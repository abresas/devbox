# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function( ${3:first_argument} ) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} ${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) { 
		${2} 
	};
# if
snippet if
	if ( ${1:true} ) {
		${2}
	}
# if ... else
snippet ife
	if ( ${1:true} ) {
		${2}
	}
	else {
		${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch ( ${1:expression} ) {
		case ${2:condition}:
			${3:// code}
			break;
		${4}
	}
# case
snippet case
	case ${1:case}:
		${2:// code}
		break;
	${3}
snippet de
	default:
		${1:// code}
# for (...) {...}
snippet for
	for ( var ${1:i} = 0; $1 < ${2:count}; $1${3:++} ) {
		${4}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forl
	for ( var ${1:i} = 0; $1 < ${2:array}.length; $1${3:++} ) {
		var ${4:item} = ${5:$2[ $1 ]};
	}
# while (...) {...}
snippet wh
	while ( ${1:/* condition */} ) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while ( ${1:/* condition */} );
# Object Method
snippet :f
	${1:method_name}: function(${2:argument}) {
		${3}
	}${4:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
snippet def
	define( [${1:modules}], function(${2:requirements}) {
		${3:// body}
	} );
snippet undefined?
	if ( typeof ${1:variable} == "undefined" ) {
		${2:// code}
	}
snippet defined?
	if ( typeof ${1:variable} == "defined" ) {
		${2:// code}
	}
